package org.usfirst.frc.team1155.robot;

import org.usfirst.frc.team1155.robot.commands.JoystickDriveCommand;
import org.usfirst.frc.team1155.robot.commands.PickUpBoulderCommandGroup;
import org.usfirst.frc.team1155.robot.commands.ShooterIOCommand;
import org.usfirst.frc.team1155.robot.commands.VisionTurnCommand;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI extends Command {
	private static final int INTAKE_ARM_MIN_POSITION = 1023/2,
							 INTAKE_ARM_MAX_POSITION = 0;

	public Joystick leftJoystick, rightJoystick, gamePad;

	private Command joystickDrive, intakeStart;
	// Input is the conveyor, load is the window motor (loading it into firing position). 
	// Left joystick is input, right joystick is shoot
	private Button driveStraight, shoot, rev, rightJoystickTrigger, leftJoystickTrigger;

	private Button defenseMode, climbMode, shootMode, inputMode;
	private Button primaryGamePadButton, secondaryGamePadButton, leftGamepadTrigger, rightGamepadTrigger;

	private Ultrasonic ultra;
	private Servo cameraPan, cameraTilt;

	private Mode mode;

	private enum Mode {
		INPUT, SHOOT, DEFENSE, CLIMB;
	}

	/**
	 * Operator Input Class
	 * 
	 * Manages all inputs from drivers and translates them into commands for the Robot to follow <br>
	 * 
	 * There are 4 Modes for the robot which change the function of three buttons on the gamepad <br> <br>
	 * The buttons are <ul>
	 * primaryGamePadButton <br>
	 * secondaryGamePadButton <br>
	 * tertiaryGamePadButton <br> </ul>
	 * <br> 
	 * 
	 * <ul>
	 * <li> INPUT <ul>
	 * <li> Changes Robot to INPUT mode. </li> <ul>
	 * <li> Allows for control of Window Motor Intake </li>
	 * <li> Allows for control of Intake Arm  </li>
	 * <li> Allows for control of Conveyor Intake  </li> </ul> </ul>
	 * 
	 * <li> SHOOT <ul>
	 * <li> Changes Robot to SHOOT mode </li> <ul>
	 * <li> Allows for control of Shooting </li>
	 * <li> Allows for control of Precise Shooter Speed </li> </ul> </ul>
	 * 
	 * <li> DEFENSE todo autogenerated stub </li>
	 * <li> CLIMB todo autogenerated stub </li>
	 * 
	 * 
	 * 
	 */
	public OI() {
		leftJoystick = new Joystick(PortMap.JOYSTICK_LEFT);
		rightJoystick = new Joystick(PortMap.JOYSTICK_RIGHT);
		gamePad = new Joystick(PortMap.GAMEPAD);

		// Button map
		rightJoystickTrigger = new JoystickButton(rightJoystick, 0);
		leftJoystickTrigger = new JoystickButton(leftJoystick, 0);
		
		defenseMode = new JoystickButton(gamePad, 1);
		climbMode = new JoystickButton(gamePad, 2);
		shootMode = new JoystickButton(gamePad, 3);
		inputMode = new JoystickButton(gamePad, 4);

		primaryGamePadButton = new JoystickButton(gamePad, 5); // Left bump
		secondaryGamePadButton = new JoystickButton(gamePad, 6); // Right bump
		leftGamepadTrigger = new JoystickButton(gamePad, 7); // Left trigger
		rightGamepadTrigger = new JoystickButton(gamePad, 8); //Right trigger
		
		// Initialize drive command
		joystickDrive = new JoystickDriveCommand(leftJoystick, rightJoystick, driveStraight);

		// Intake command
		intakeStart = new PickUpBoulderCommandGroup();

		// Initialize shoot button mapping
		// Shooting works in two stages. The first is the motors revving up. The
		// second is the piston retracting, and pushing the
		// ball into the shooter

		Robot.imageSubsystem.setCameraTilt(90);
		
		mode = Mode.INPUT;

		cameraPan = new Servo(9);
		cameraTilt = new Servo(8);
	}

	@Override
	protected void initialize() {
		joystickDrive.start();
		cameraPan.setAngle(90);
		cameraTilt.setAngle(0);
	}

	@Override
	protected void execute() {
		System.out.println(Robot.intakeSubsystem.ballDetector.getRangeInches());
		SmartDashboard.putString("Mode", mode.toString());

		double gamePadPOV = gamePad.getPOV();
		double leftJoystickPOV = leftJoystick.getPOV();
		double rightJoystickPOV = rightJoystick.getPOV();
		boolean changedToInputMode = false, 
				changedToShootMode = false, 
				changedToDefenseMode = false, 
				changedToClimbMode = false;

		if (inputMode.get())
			mode = Mode.INPUT;
		if (shootMode.get())
			mode = Mode.SHOOT;
		if (defenseMode.get())
			mode = Mode.DEFENSE;
		if (climbMode.get())
			mode = Mode.CLIMB;

		switch (mode) {
		case INPUT: 
			//defaults at intake position (parallel to floor)
			if(Robot.intakeSubsystem.intakeTalon.get() != 0.5 && !changedToInputMode) {
				changedToInputMode = true;
				changedToShootMode = false;
				changedToClimbMode = false;
				changedToDefenseMode = false;
				Robot.intakeSubsystem.intakeTalon.set(0.5);
			}
			
			//camera servo point down to see floor
			cameraTilt.setAngle(180);
			
			//Dpad should have manual control over window motor, L & R triggers run conveyor
			if (leftGamepadTrigger.get())
				Robot.intakeSubsystem.setConveyorSpeed(0.5);
			else if (rightGamepadTrigger.get())
				Robot.intakeSubsystem.setConveyorSpeed(-0.5);
			
			// Control window motor (D-Pad)
			if (primaryGamePadButton.get())
				intakeStart.start();
			else
				intakeStart.cancel();

			//L & R trigger on joysticks should activate intake command
			if(rightJoystickTrigger.get())
				Robot.intakeSubsystem.setPivotIntakePosition(INTAKE_ARM_MAX_POSITION);
			if(leftJoystickTrigger.get())
				Robot.intakeSubsystem.setPivotIntakePosition(INTAKE_ARM_MIN_POSITION);
			if (gamePadPOV == 0)
				Robot.intakeSubsystem.setPivotIntakePosition(Robot.intakeSubsystem.getPivotSetPosition() + 10);
			else if (gamePadPOV == 180)
				Robot.intakeSubsystem.setPivotIntakePosition(Robot.intakeSubsystem.getPivotSetPosition() - 10);
			
			SmartDashboard.putString("Pivot: ", Robot.intakeSubsystem.getPivotIntakePosition() + " "
					 						  + Robot.intakeSubsystem.getPivotSetPosition());
			
			//Jerry-rigged, test setup
			if (gamePadPOV == 90) {
				Robot.intakeSubsystem.setHolderSpeed(-0.4);
				Robot.shootSubsystem.setBallPossessed(true); 
				System.out.println("Up the ball goes");
			} else if (gamePadPOV == 360) {
				Robot.intakeSubsystem.setHolderSpeed(0.4);
				Robot.shootSubsystem.setBallPossessed(false);
				System.out.println("Down the ball goes");
			} else {
				Robot.intakeSubsystem.setHolderSpeed(0);
			}
			break;
			
		case SHOOT: 
			//intake arm defaults to full down
			if(Robot.intakeSubsystem.intakeTalon.get() != 0 && !changedToShootMode) {
				changedToInputMode = false;
				changedToShootMode = true;
				changedToClimbMode = false;
				changedToDefenseMode = false;
				Robot.intakeSubsystem.intakeTalon.set(0);
			}
			
			//camera servo point up
			cameraTilt.setAngle(0);
			
			//pushing forward on either hat switch on the joysticks should activate the piston to shoot ball
			if (leftJoystickPOV == 0 || rightJoystickPOV == 0) {
				Robot.shootSubsystem.extendPiston();
			} else if (leftJoystickPOV == 180 || rightJoystickPOV == 180) {
				Robot.shootSubsystem.retractPiston();
			}
			
			//gamepad L & R bumpers used to allign
			leftGamepadTrigger.whenPressed(new VisionTurnCommand());
			rightGamepadTrigger.whenPressed(new VisionTurnCommand());

			//L & R trigger on both joysticks should activate the revving of shooter's wheels
			rightJoystickTrigger.whenPressed(new ShooterIOCommand());
			leftJoystickTrigger.whileHeld(new ShooterIOCommand());
			
			// Align and shoot button
			primaryGamePadButton.whenPressed(new ShooterIOCommand());
			if (secondaryGamePadButton.get()) {
				// Set to the correct axis
				Robot.shootSubsystem.setShooterSpeed(-(rightJoystick.getRawAxis(3) - 1) / 2.0); 
				System.out.println("Revving shooter");
			} else {
				Robot.shootSubsystem.setShooterSpeed(0);
			}
			break;
		case DEFENSE: // Leave it
			cameraTilt.setAngle(0);
			//intake arm defaults to full down
			if(Robot.intakeSubsystem.intakeTalon.get() != 0 && !changedToDefenseMode) {
				changedToInputMode = false;
				changedToShootMode = false;
				changedToClimbMode = false;
				changedToDefenseMode = true;
				Robot.intakeSubsystem.intakeTalon.set(0);
			}
			
			//dpad controls position of intake arm
			if (gamePadPOV == 0)
				Robot.intakeSubsystem.intakeTalon.set(Robot.intakeSubsystem.intakeTalon.get() + 0.1);
			else if (gamePadPOV == 180)
				Robot.intakeSubsystem.intakeTalon.set(Robot.intakeSubsystem.intakeTalon.get() - 0.1);
			
			//L & R trigger gamepad control the piston on second intake IF it is there
			
			break;
		case CLIMB: 
			//intake arm defaults to full down
			if(Robot.intakeSubsystem.intakeTalon.get() != 0 && !changedToClimbMode) {
				changedToInputMode = false;
				changedToShootMode = false;
				changedToClimbMode = true;
				changedToDefenseMode = false;
				Robot.intakeSubsystem.intakeTalon.set(0);
			}
			//gamepad L & R trigger used for climbing, Dpad for moving arm up or down
			break;
		}
		

		// Restarts drive
		if (!joystickDrive.isRunning()) {
			if (leftJoystick.getY() > 0.05 || rightJoystick.getY() > 0.05)
				joystickDrive.start();
		}
	}

	@Override
	protected boolean isFinished() {
		return false;
	}

	@Override
	protected void end() {
		joystickDrive.cancel();
	}

	@Override
	protected void interrupted() {
		joystickDrive.cancel();
	}
}
